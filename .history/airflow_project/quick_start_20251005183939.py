#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour le projet ETL Qualit√© des Donn√©es
Interface unifi√©e pour g√©n√©rer, analyser et traiter les donn√©es
"""

import os
import sys
import subprocess
from pathlib import Path
import json

def show_banner():
    """Afficher la banni√®re du projet."""
    print("" + "="*58 + "")
    print(" PROJET ETL QUALIT√â DES DONN√âES √âNERG√âTIQUES - AIRFLOW ")
    print("" + "="*58 + "")
    print()
    print(" Ce projet d√©montre un pipeline ETL complet avec:")
    print("   ‚úì √âvaluation de qualit√© des donn√©es")
    print("   ‚úì Am√©lioration automatique des d√©fauts")
    print("   ‚úì Int√©gration multi-sources")
    print("   ‚úì Visualisations et rapports")
    print("   ‚úì Tests de performance")
    print()

def check_dependencies():
    """V√©rifier les d√©pendances syst√®me."""
    print("üîç V√©rification des d√©pendances...")
    
    # Python packages
    required_packages = ['pandas', 'numpy', 'matplotlib', 'seaborn', 'psutil']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f" Packages Python manquants: {', '.join(missing_packages)}")
        print(" Installez-les avec: pip install -r requirements.txt")
        return False
    
    # Docker (optionnel)
    try:
        subprocess.run(['docker', '--version'], check=True, capture_output=True)
        print("‚úÖ Docker disponible")
        docker_available = True
    except:
        print("‚ö†Ô∏è  Docker non d√©tect√© (optionnel pour Airflow)")
        docker_available = False
    
    print("‚úÖ D√©pendances v√©rifi√©es")
    return True

def show_data_status():
    """Afficher le statut des donn√©es."""
    sources_dir = Path("sources")
    
    if not sources_dir.exists() or not any(sources_dir.glob("*.csv")):
        print("üìÇ Statut des donn√©es:  AUCUNE DONN√âE")
        return False
    
    print("üìÇ Statut des donn√©es: ‚úÖ DONN√âES PR√âSENTES")
    
    total_size = 0
    total_lines = 0
    
    for csv_file in sources_dir.glob("*.csv"):
        size_mb = csv_file.stat().st_size / (1024**2)
        total_size += size_mb
        
        # Estimation rapide du nombre de lignes
        try:
            with open(csv_file, 'r') as f:
                lines = sum(1 for _ in f) - 1  # -1 pour header
            total_lines += lines
        except:
            lines = 0
        
        print(f"   {csv_file.name:25} : {size_mb:6.1f} MB ({lines:,} lignes)")
    
    print(f"   {'TOTAL':25} : {total_size:6.1f} MB ({total_lines:,} lignes)")
    return True

def main_menu():
    """Afficher le menu principal."""
    
    data_exists = show_data_status()
    print()
    
    print("üéõÔ∏è  QUE VOULEZ-VOUS FAIRE?")
    print("-" * 30)
    
    if not data_exists:
        print("1.  G√©n√©rer des donn√©es synth√©tiques")
        print("2. üìã Voir la documentation")
        print("0.  Quitter")
        
        choice = input("\nVotre choix (0-2): ").strip()
        
        if choice == "1":
            generate_data_menu()
        elif choice == "2":
            show_documentation()
        elif choice == "0":
            print("üëã Au revoir!")
            return False
        else:
            print(" Choix invalide")
            
    else:
        print("1.  G√©n√©rer de nouvelles donn√©es")
        print("2. üîç Analyser la qualit√© des donn√©es")
        print("3. üßπ D√©monstration d'am√©lioration qualit√©")
        print("4. üìà Benchmark de performance")
        print("5.  Lancer Airflow (ETL complet)")
        print("6. üìã Voir la documentation")
        print("7. üóëÔ∏è  Nettoyer les donn√©es")
        print("0.  Quitter")
        
        choice = input("\nVotre choix (0-7): ").strip()
        
        if choice == "1":
            generate_data_menu()
        elif choice == "2":
            analyze_data_quality()
        elif choice == "3":
            demo_quality_improvement()
        elif choice == "4":
            run_performance_benchmark()
        elif choice == "5":
            launch_airflow()
        elif choice == "6":
            show_documentation()
        elif choice == "7":
            clean_data()
        elif choice == "0":
            print("üëã Au revoir!")
            return False
        else:
            print(" Choix invalide")
    
    return True

def generate_data_menu():
    """Menu de g√©n√©ration de donn√©es."""
    print("\n G√âN√âRATION DE DONN√âES")
    print("-" * 30)
    print("1. üîß Configuration automatique (recommand√©)")
    print("2. üìà G√©n√©rateur standard")
    print("3. üè≠ G√©n√©rateur massif")
    print("0. ‚¨ÖÔ∏è  Retour")
    
    choice = input("\nVotre choix (0-3): ").strip()
    
    if choice == "1":
        try:
            subprocess.run([sys.executable, "configure_datasets.py"])
        except Exception as e:
            print(f" Erreur: {e}")
    elif choice == "2":
        try:
            subprocess.run([sys.executable, "generate_large_datasets.py"])
        except Exception as e:
            print(f" Erreur: {e}")
    elif choice == "3":
        try:
            subprocess.run([sys.executable, "generate_massive_datasets.py"])
        except Exception as e:
            print(f" Erreur: {e}")

def analyze_data_quality():
    """Analyser la qualit√© des donn√©es."""
    print("\nüîç ANALYSE DE QUALIT√â DES DONN√âES")
    print("-" * 40)
    
    try:
        # Importer et utiliser les outils de qualit√©
        sys.path.append('utils')
        from quality_checks import generate_quality_report
        import pandas as pd
        
        sources_dir = Path("sources")
        
        for csv_file in sources_dir.glob("*.csv"):
            if csv_file.name.startswith(('population', 'consommation')):
                print(f" Analyse de {csv_file.name}...")
                
                df = pd.read_csv(csv_file)
                report = generate_quality_report(df, csv_file.stem)
                
                score = report['quality_score']['overall_quality_score']
                level = report['quality_score']['quality_level']
                
                print(f"   Score global: {score}% ({level})")
                print(f"   Lignes: {len(df):,}")
                print(f"   Colonnes: {len(df.columns)}")
                
                # Probl√®mes principaux
                completeness = report['quality_score']['completeness_score']
                uniqueness = report['quality_score']['uniqueness_score']
                
                if completeness < 95:
                    print(f"   ‚ö†Ô∏è  Compl√©tude faible: {completeness}%")
                if uniqueness < 95:
                    print(f"   ‚ö†Ô∏è  Doublons d√©tect√©s: {100-uniqueness:.1f}%")
                
                print()
        
        print("‚úÖ Analyse termin√©e")
        print(" Rapports d√©taill√©s disponibles dans 'quality_reports/'")
        
    except Exception as e:
        print(f" Erreur lors de l'analyse: {e}")

def demo_quality_improvement():
    """D√©monstration d'am√©lioration de qualit√©."""
    print("\nüßπ D√âMONSTRATION D'AM√âLIORATION DE QUALIT√â")
    print("-" * 50)
    
    try:
        subprocess.run([sys.executable, "demo_quality_improvement.py"])
    except Exception as e:
        print(f" Erreur: {e}")

def run_performance_benchmark():
    """Lancer le benchmark de performance."""
    print("\nüìà BENCHMARK DE PERFORMANCE")
    print("-" * 35)
    
    try:
        subprocess.run([sys.executable, "benchmark_performance.py"])
    except Exception as e:
        print(f" Erreur: {e}")

def launch_airflow():
    """Lancer Airflow."""
    print("\n LANCEMENT D'AIRFLOW")
    print("-" * 25)
    
    # V√©rifier Docker
    try:
        subprocess.run(['docker', '--version'], check=True, capture_output=True)
        
        print("üê≥ Docker d√©tect√©")
        print("üìã Instructions pour lancer Airflow:")
        print()
        print("1. Initialiser Airflow:")
        print("   docker-compose up airflow-init")
        print()
        print("2. D√©marrer Airflow:")
        print("   docker-compose up -d")
        print()
        print("3. Acc√©der √† l'interface:")
        print("   http://localhost:8080")
        print("   Login: admin / admin123")
        print()
        print("4. D√©clencher le DAG 'energy_data_quality_etl'")
        print()
        
        auto_launch = input("Lancer automatiquement? (o/N): ").lower().strip()
        
        if auto_launch in ['o', 'oui', 'y', 'yes']:
            print(" Lancement d'Airflow...")
            try:
                subprocess.run(['docker-compose', 'up', 'airflow-init'], check=True)
                subprocess.run(['docker-compose', 'up', '-d'], check=True)
                print("‚úÖ Airflow d√©marr√© sur http://localhost:8080")
            except Exception as e:
                print(f" Erreur lors du lancement: {e}")
        
    except:
        print(" Docker non disponible")
        print("üìã Alternative: Installation locale d'Airflow")
        print("   pip install apache-airflow")
        print("   export AIRFLOW_HOME=$(pwd)")
        print("   airflow db init")
        print("   airflow webserver --port 8080")

def clean_data():
    """Nettoyer les donn√©es."""
    print("\nüóëÔ∏è  NETTOYAGE DES DONN√âES")
    print("-" * 30)
    
    sources_dir = Path("sources")
    output_dir = Path("output")
    reports_dir = Path("quality_reports")
    viz_dir = Path("visualizations")
    
    dirs_to_clean = [sources_dir, output_dir, reports_dir, viz_dir]
    
    for directory in dirs_to_clean:
        if directory.exists():
            files = list(directory.glob("*"))
            if files:
                print(f"üìÅ {directory.name}: {len(files)} fichiers trouv√©s")
    
    confirm = input("\nConfirmer la suppression? (o/N): ").lower().strip()
    
    if confirm in ['o', 'oui', 'y', 'yes']:
        for directory in dirs_to_clean:
            if directory.exists():
                for file in directory.glob("*"):
                    if file.is_file():
                        file.unlink()
                        print(f"  ‚úì {file.name} supprim√©")
        print("‚úÖ Nettoyage termin√©")
    else:
        print(" Nettoyage annul√©")

def show_documentation():
    """Afficher la documentation."""
    print("\nüìã DOCUMENTATION DU PROJET")
    print("-" * 35)
    print()
    print("üìÅ Structure du projet:")
    print("   airflow_project/")
    print("   ‚îú‚îÄ‚îÄ dags/                    # DAGs Airflow")
    print("   ‚îú‚îÄ‚îÄ sources/                 # Donn√©es sources")
    print("   ‚îú‚îÄ‚îÄ output/                  # Donn√©es trait√©es")
    print("   ‚îú‚îÄ‚îÄ quality_reports/         # Rapports qualit√©")
    print("   ‚îú‚îÄ‚îÄ visualizations/          # Graphiques")
    print("   ‚îú‚îÄ‚îÄ utils/                   # Outils qualit√©")
    print("   ‚îî‚îÄ‚îÄ README.md                # Documentation compl√®te")
    print()
    print("üîß Scripts disponibles:")
    print("   configure_datasets.py        # Interface de g√©n√©ration")
    print("   generate_large_datasets.py   # G√©n√©rateur standard")
    print("   generate_massive_datasets.py # G√©n√©rateur massif")
    print("   demo_quality_improvement.py  # D√©mo am√©lioration")
    print("   benchmark_performance.py     # Tests performance")
    print()
    print(" Sch√©ma cible:")
    print("   Consommation_IRIS_Paris      # Consommation par zone IRIS")
    print("   Consommation_IRIS_Evry       # Consommation par zone IRIS")
    print("   Consommation_CSP             # Consommation par cat√©gorie socio-pro")
    print()
    print("üîç Probl√®mes de qualit√© trait√©s:")
    print("   ‚úì Valeurs manquantes")
    print("   ‚úì Doublons")
    print("   ‚úì Formats incoh√©rents")
    print("   ‚úì Codifications mixtes")
    print("   ‚úì H√©t√©rog√©n√©it√© des √©chelles")
    print()
    
    readme_path = Path("README.md")
    if readme_path.exists():
        view_readme = input("Ouvrir le README.md complet? (o/N): ").lower().strip()
        if view_readme in ['o', 'oui', 'y', 'yes']:
            try:
                with open(readme_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                print("\n" + "="*60)
                print(content)
                print("="*60)
            except Exception as e:
                print(f" Erreur lors de la lecture: {e}")

def main():
    """Fonction principale."""
    show_banner()
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print("\n Veuillez installer les d√©pendances manquantes avant de continuer")
        return
    
    print()
    
    # Boucle principale
    while True:
        try:
            if not main_menu():
                break
            
            input("\nAppuyez sur Entr√©e pour continuer...")
            print("\n" + "="*60 + "\n")
            
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            break
        except Exception as e:
            print(f"\n Erreur inattendue: {e}")
            input("Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    main()